package de.tum.in.ase.eist;

// TODO Implement this class. Check out the LoggingReadWriteLock which extends this class while
// doing so.
// Tip regarding interruptedexceptions: You can just ignore them and continue waiting
/**
 * A simple ReadWriteLock implementation. NOTE: this implementation does not need to be "fair" (fair
 * == lock requests are guaranteed to be handled in the order of their arrival), as requiring
 * fairness would make this task too hard.
 */
public class ReadWriteLock {

  int readerCount = 0;
  int writerCount = 0;

  public synchronized void lockRead() {
    while (writerCount > 0) {
      try {
        wait();
      } catch (InterruptedException e) {
        // Ignore the exception and continue waiting
      }
    }
    readerCount++;
  }

  public synchronized void unlockRead() {
    readerCount--;
    if (readerCount == 0) {
      notifyAll();
    }
  }

  public synchronized void lockWrite() {
    while (writerCount > 0 || readerCount > 0) {
      try {
        wait();
      } catch (InterruptedException e) {
        // Ignore the exception and continue waiting
      }
    }
    writerCount++;
  }

  public synchronized void unlockWrite() {
    writerCount = 0;
    notifyAll();
  }
}

